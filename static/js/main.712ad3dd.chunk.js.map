{"version":3,"sources":["Vacancy/Vacancy.js","VacancyBlock.js","App.js","serviceWorker.js","index.js"],"names":["props","title","company","description","className","to","VacancyBlock","vacancyList","id","map","vacancy","i","key","App","useState","style","textAlign","path","element","Boolean","window","location","hostname","match","AppRouter","basename","process","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+NAIe,WAACA,GAAW,IACjBC,EAAgCD,EAAhCC,MAAOC,EAAyBF,EAAzBE,QAASC,EAAgBH,EAAhBG,YAExB,OACE,yBAAKC,UAAU,kDACb,4BACE,kBAAC,IAAD,CAASC,GAAG,YAAYJ,IAE1B,yBAAKG,UAAU,cACb,8BACE,2BAAIF,KAGR,uBAAGE,UAAU,6CAA6CD,KCMjDG,EApBM,SAACN,GAAW,IACvBO,EAAgBP,EAAhBO,YACR,OACE,yBAAKC,GAAG,iBACLD,EACGA,EAAYE,KAAI,SAACC,EAASC,GACxB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLV,MAAOS,EAAQT,MACfC,QAASQ,EAAQR,QACjBC,YAAaO,EAAQP,iBAI3B,OCqBKU,EAlCH,WAAO,IAAD,EACMC,oBAAS,iBAAM,CACnC,CACEb,MAAO,qHACPC,QAAS,0GACTC,YACE,82BAEJ,CACEF,MAAO,yFACPC,QAAS,OACTC,YACE,4pCAXCI,EADS,oBAgBhB,OACE,yBACEH,UAAU,MACVW,MAAO,CACLC,UAAW,WAGb,gFACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,KAAK,WACLC,QAAS,kBAAC,EAAD,CAAcX,YAAaA,SCpB1BY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXN,IAAMC,EACJ,kBAAC,IAAD,CAAQC,SAAUC,gBAChB,kBAAC,EAAD,OAIJC,IAASC,OAAOJ,EAAWK,SAASC,eAAe,SDsH7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.712ad3dd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport \"./Vacancy.scss\";\r\n\r\nexport default (props) => {\r\n  const { title, company, description } = props;\r\n\r\n  return (\r\n    <div className=\"card card-hover card-visited wordwrap job-link\">\r\n      <h2>\r\n        <NavLink to=\"/vacancy\">{title}</NavLink>\r\n      </h2>\r\n      <div className=\"add-top-xs\">\r\n        <span>\r\n          <b>{company}</b>\r\n        </span>\r\n      </div>\r\n      <p className=\"overflow text-muted add-top-sm cut-bottom\">{description}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Vacancy from \"./Vacancy/Vacancy\";\r\n\r\nconst VacancyBlock = (props) => {\r\n  const { vacancyList } = props;\r\n  return (\r\n    <div id=\"pjax-job-list\">\r\n      {vacancyList\r\n        ? vacancyList.map((vacancy, i) => {\r\n            return (\r\n              <Vacancy\r\n                key={i}\r\n                title={vacancy.title}\r\n                company={vacancy.company}\r\n                description={vacancy.description}\r\n              />\r\n            );\r\n          })\r\n        : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VacancyBlock;\r\n","import React, { useState } from \"react\";\nimport \"./Vacancy/Vacancy.scss\";\nimport { Route, Routes } from \"react-router-dom\";\nimport VacancyBlock from \"./VacancyBlock\";\n\nconst App = () => {\n  const [vacancyList] = useState(() => [\n    {\n      title: \"Старший Java-разработчик\",\n      company: \"СберМобайл/Телеком\",\n      description:\n        \"СберМобайл - новый мобильный оператор связи от Сбербанка ищет Старшего разработчика java. Возможность практически с нуля сделать связывающий воедино системы оператора backend\",\n    },\n    {\n      title: \"Backend-разработчик Java/Kotlin\",\n      company: \"Okko\",\n      description:\n        \"Мультимедийный сервис Okko — один из крупнейших российских VoD-сервисов, лидер по платной модели монетизации. Проект стартовал в 2011 году и сегодня представлен на всех ключевых платформах: Smart TV, mobile (IOS и Android), Apple TV, PlayStation 3, 4 и 5, web (ПК). Okko входит в экосистему Сбера.\",\n    },\n  ]);\n\n  return (\n    <div\n      className=\"App\"\n      style={{\n        textAlign: \"center\",\n      }}\n    >\n      <h1>Вакансии</h1>\n      <Routes>\n        <Route\n          path=\"/vacancy\"\n          element={<VacancyBlock vacancyList={vacancyList} />}\n        />\n      </Routes>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { HashRouter as Router } from \"react-router-dom\";\n\nconst AppRouter = (\n  <Router basename={process.env.PUBLIC_URL}>\n    <App />\n  </Router>\n);\n\nReactDOM.render(AppRouter, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}